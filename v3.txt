import openai
import sys
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton, QLineEdit, QMessageBox, QFileDialog
from PyQt5.QtGui import QFont

import subprocess
import webbrowser
import requests
from PIL import Image
import matplotlib.pyplot as plt
from gtts import gTTS
import os
# Define the application details
LICENSE = "Not approved yet"
AUTHOR = "Sandeep Kasturi Diploma in Computer Engineering and AIML online"
PROJECT = "SKY AI APP"
PRODUCT_NAME = "SKY AI APP"
COMPANY_NAME = "Sandeep AI verse non-business company"
VERSION = "3"
APPLICATION_TYPE = ".exe"

# Set up the OpenAI API
openai.api_key = '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'


# Function to generate code using OpenAI API
def generate_code(prompt, language, engine):
    response = openai.Completion.create(
        engine=engine,
        prompt=f"{prompt} in {language}",
        max_tokens=3048,  # Set a lower value to fit within the model's maximum context length
        temperature=0.5,
        n=1,
        stop=None,
        frequency_penalty=0.4,
        presence_penalty=0.6,
        best_of=1,
    )
    code = response.choices[0].text.strip()
    return code


# Function to generate image using OpenAI API
# Function to open Notepad and write code/content
def write_to_notepad(content, is_code):
    try:
        if is_code:
            file_name = "sky_code_generated.txt"
        else:
            file_name = "sky_content_generated.txt"

        with open(file_name, "w") as file:
            file.write(content)
        subprocess.Popen(["notepad.exe", file_name])
    except Exception as e:
        QMessageBox.critical(main_window, "Error", f"An error occurred while writing to Notepad:\n{str(e)}")


# Function to convert text to speech using gTTS
def text_to_speech(text):
    try:
        tts = gTTS(text=text, lang='en')
        audio_file = 'prompt_answer.mp3'
        tts.save(audio_file)
        os.system(audio_file)
    except Exception as e:
        QMessageBox.critical(main_window, "Error", f"An error occurred while converting text to speech:\n{str(e)}")



# Function to download and open the image
def download_and_open_image(image_url):
    try:
        response = requests.get(image_url, stream=True)
        if response.status_code == 200:
            with open("generated_image.png", "wb") as file:
                file.write(response.content)
            webbrowser.open("generated_image.png")
    except Exception as e:
        QMessageBox.critical(main_window, "Error", f"An error occurred while generating the image:\n{str(e)}")

# Main function for code/content generation
def generate_code_or_content(prompt, language, is_content, engine):
    try:
        if is_content:
            generated_content = generate_code(prompt, language, engine)
            write_to_notepad(generated_content)
            QMessageBox.information(main_window, "Success", "Successfully generated the content")
        else:
            generated_code = generate_code(prompt, language, engine)
            write_to_notepad(generated_code)
            QMessageBox.information(main_window, "Success", "Successfully generated the code")
    except Exception as e:
        QMessageBox.critical(main_window, "Error", f"An error occurred during code/content generation:\n{str(e)}")


# Function to open URLs in a web browser
def open_url(url):
    try:
        webbrowser.open(url)
    except Exception as e:
        QMessageBox.critical(main_window, "Error", f"An error occurred while opening the URL:\n{str(e)}")



class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setWindowTitle("SKY AI")
        self.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint | QtCore.Qt.WindowMaximizeButtonHint)

        self.init_ui()

    def init_ui(self):
        theme_default_btn = QPushButton("Default", self)
        theme_default_btn.setGeometry(QtCore.QRect(20, 20, 80, 30))
        theme_default_btn.setStyleSheet("background-color: lightgreen;")
        theme_default_btn.clicked.connect(self.theme_default_btn_clicked)

        theme_dark_btn = QPushButton("Dark", self)
        theme_dark_btn.setGeometry(QtCore.QRect(110, 20, 80, 30))
        theme_dark_btn.setStyleSheet("background-color: lightgreen;")
        theme_dark_btn.clicked.connect(self.theme_dark_btn_clicked)

        theme_light_btn = QPushButton("Light", self)
        theme_light_btn.setGeometry(QtCore.QRect(200, 20, 80, 30))
        theme_light_btn.setStyleSheet("background-color: lightgreen;")
        theme_light_btn.clicked.connect(self.theme_light_btn_clicked)

        prompt_label = QLabel("Enter Prompt:", self)
        prompt_label.setGeometry(QtCore.QRect(20, 60, 100, 30))
        self.prompt_input = QLineEdit(self)
        self.prompt_input.setGeometry(QtCore.QRect(140, 60, 600, 30))

        language_label = QLabel("Programming Language:", self)
        language_label.setGeometry(QtCore.QRect(20, 100, 150, 30))
        self.language_input = QLineEdit(self)
        self.language_input.setGeometry(QtCore.QRect(190, 100, 550, 30))

        code_btn = QPushButton("Generate Code", self)
        code_btn.setGeometry(QtCore.QRect(20, 160, 150, 40))
        code_btn.setStyleSheet("background-color: lightgreen;")
        code_btn.clicked.connect(self.generate_code_btn_clicked)

        content_btn = QPushButton("Generate Content", self)
        content_btn.setGeometry(QtCore.QRect(20, 220, 150, 40))
        content_btn.setStyleSheet("background-color: lightgreen;")
        content_btn.clicked.connect(self.generate_content_btn_clicked)

        image_btn = QPushButton("Generate Image", self)
        image_btn.setGeometry(QtCore.QRect(20, 280, 150, 40))
        image_btn.setStyleSheet("background-color: lightgreen;")
        image_btn.clicked.connect(self.generate_image_btn_clicked)

        tts_btn = QPushButton("Text-to-Speech", self)
        tts_btn.setGeometry(QtCore.QRect(20, 340, 150, 40))
        tts_btn.setStyleSheet("background-color: lightgreen;")
        tts_btn.clicked.connect(self.text_to_speech_btn_clicked)

        continue_code_btn = QPushButton("Continue Generating Code", self)
        continue_code_btn.setGeometry(QtCore.QRect(20, 400, 200, 40))
        continue_code_btn.setStyleSheet("background-color:lightgreen;")
        continue_code_btn.clicked.connect(self.continue_generating_code_btn_clicked)

        continue_content_btn = QPushButton("Continue Generating Content", self)
        continue_content_btn.setGeometry(QtCore.QRect(230, 400, 200, 40))
        continue_content_btn.setStyleSheet("background-color: lightgreen;")
        continue_content_btn.clicked.connect(self.continue_generating_content_btn_clicked)

        help_btn = QPushButton("Help", self)
        help_btn.setGeometry(QtCore.QRect(440, 400, 120, 40))
        help_btn.setStyleSheet("background-color: lightgreen;")
        help_btn.clicked.connect(self.help_btn_clicked)

        report_btn = QPushButton("Report or Message", self)
        report_btn.setGeometry(QtCore.QRect(570, 400, 180, 40))
        report_btn.setStyleSheet("background-color: lightgreen")
        report_btn.clicked.connect(self.report_btn_clicked)

        format_btn = QPushButton("Change File Format", self)
        format_btn.setGeometry(QtCore.QRect(20, 460, 180, 40))
        format_btn.setStyleSheet("background-color: lightgreen;")
        format_btn.clicked.connect(self.change_format_btn_clicked)

        exit_btn = QPushButton("Exit", self)
        exit_btn.setGeometry(QtCore.QRect(230, 460, 120, 40))
        exit_btn.setStyleSheet("background-color: tomato;")
        exit_btn.clicked.connect(self.exit_btn_clicked)

    def resizeEvent(self, event):
        if self.windowState() & QtCore.Qt.WindowMaximized:
            self.setGeometry(QApplication.desktop().availableGeometry().adjusted(10, 10, -10, -10))
        else:
            self.setGeometry(100, 100, 800, 500)

    def generate_code_btn_clicked(self):
        prompt = self.prompt_input.text()
        language = self.language_input.text()
        generate_code_or_content(prompt, language, False, "text-davinci-003")

    def generate_content_btn_clicked(self):
        prompt = self.prompt_input.text()
        language = self.language_input.text()
        generate_code_or_content(prompt, language, True, "text-davinci-003")

    def generate_image_btn_clicked(self):
        QMessageBox.information(self, "Info", "Sorry Sandeep Kasturi is Working on that. We will update this in future.")

    def text_to_speech_btn_clicked(self):
        prompt = self.prompt_input.text()
        text_to_speech(prompt)

    def continue_generating_code_btn_clicked(self):
        language = self.language_input.text()
        generate_code_or_content("", language, False, "text-davinci-003")

    def continue_generating_content_btn_clicked(self):
        language = self.language_input.text()
        generate_code_or_content("", language, True, "text-davinci-003")

    def help_btn_clicked(self):
        open_url("https://github.com/sandeepkasturi")  # Replace with the actual GitHub link

    def report_btn_clicked(self):
        open_url("https://instagram.com/sandeep_kasturi_")

    def change_format_btn_clicked(self):
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.AnyFile)
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_path, _ = file_dialog.getSaveFileName(self, "Change File Format", "",
                                                   "All Files (*);; Plain Text Files (*.txt);; Windows Batch Files (*.bat);; VB Script Files (*.vbs);; Java Files (*.java);; Bash Files (*.sh);; HTML Files (*.html);;CSS Files (*.css);;JavaScript Files (*.js);;Python Files (*.py)",
                                                   options=options)
        if file_path:
            file_extension = os.path.splitext(file_path)[1]
            QMessageBox.information(self, "Info", f"Selected file format: {file_extension}")

    def exit_btn_clicked(self):
        QMessageBox.information(self, "warning:", "Are you sure? You want to exit the application")
        if 1:
            sys.exit()
        else:
            sys.exit()

    def theme_default_btn_clicked(self):
        QtWidgets.QApplication.setStyle(QtWidgets.QStyleFactory.create("Fusion"))

    def theme_dark_btn_clicked(self):
        QtWidgets.QApplication.setStyle(QtWidgets.QStyleFactory.create("Fusion"))
        palette = QtGui.QPalette()
        palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Base, QtGui.QColor(25, 25, 25))
        palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
        palette.setColor(QtGui.QPalette.Link, QtGui.QColor(42, 130, 218))
        palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42, 130, 218))
        palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
        QtWidgets.QApplication.setPalette(palette)

    def theme_light_btn_clicked(self):
        QtWidgets.QApplication.setStyle(QtWidgets.QStyleFactory.create("Fusion"))
        QtWidgets.QApplication.setPalette(QtWidgets.QApplication.style().standardPalette())


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())
